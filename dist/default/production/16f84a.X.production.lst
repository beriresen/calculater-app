

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 26 01:17:12 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	pa_nodes0,global,class=CODE,delta=2
    21                           	dabs	1,0x4E,2
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F84A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0088                     	;# 
    72  0089                     	;# 
    73                           
    74                           	psect	strings
    75  0001                     __pstrings:	
    76  0001                     stringtab:	
    77  0001                     __stringtab:	
    78  0001                     stringcode:	
    79                           ;	String table - string pointers are 1 byte each
    80                           
    81  0001                     stringdir:	
    82  0001  3000               	movlw	high stringdir
    83  0002  008A               	movwf	10
    84  0003  0804               	movf	4,w
    85  0004  0A84               	incf	4,f
    86  0005  0782               	addwf	2,f
    87  0006                     __stringbase:	
    88  0006  3400               	retlw	0
    89  0007                     __end_of__stringtab:	
    90  0007                     _dpowers:	
    91  0007  3401               	retlw	1
    92  0008  3400               	retlw	0
    93  0009  340A               	retlw	10
    94  000A  3400               	retlw	0
    95  000B  3464               	retlw	100
    96  000C  3400               	retlw	0
    97  000D  34E8               	retlw	232
    98  000E  3403               	retlw	3
    99  000F  3410               	retlw	16
   100  0010  3427               	retlw	39
   101  0011                     __end_of_dpowers:	
   102  0005                     _PORTAbits	set	5
   103  0006                     _PORTBbits	set	6
   104  0031                     _RB1	set	49
   105  0030                     _RB0	set	48
   106  0037                     _RB7	set	55
   107  0036                     _RB6	set	54
   108  0035                     _RB5	set	53
   109  0034                     _RB4	set	52
   110  0085                     _TRISA	set	133
   111  0086                     _TRISB	set	134
   112  0432                     _TRISB2	set	1074
   113  0011                     STR_1:	
   114  0011  3431               	retlw	49	;'1'
   115  0012  342E               	retlw	46	;'.'
   116  0013  3420               	retlw	32	;' '
   117  0014  343D               	retlw	61	;'='
   118  0015  3420               	retlw	32	;' '
   119  0016  3425               	retlw	37	;'%'
   120  0017  3464               	retlw	100	;'d'
   121  0018  3400               	retlw	0
   122  0019                     STR_2:	
   123  0019  3432               	retlw	50	;'2'
   124  001A  342E               	retlw	46	;'.'
   125  001B  3420               	retlw	32	;' '
   126  001C  343D               	retlw	61	;'='
   127  001D  3420               	retlw	32	;' '
   128  001E  3425               	retlw	37	;'%'
   129  001F  3464               	retlw	100	;'d'
   130  0020  3400               	retlw	0
   131  0021                     STR_4:	
   132  0021  3420               	retlw	32	;' '
   133  0022  343A               	retlw	58	;':'
   134  0023  3420               	retlw	32	;' '
   135  0024  3425               	retlw	37	;'%'
   136  0025  3464               	retlw	100	;'d'
   137  0026  3400               	retlw	0
   138  0024                     
   139                           ; #config settings
   140  0000                     
   141                           	psect	cinit
   142  03FE                     start_initialization:	
   143  03FE                     __initialization:	
   144  03FE                     end_of_initialization:	
   145                           ;End of C runtime variable initialization code
   146                           
   147  03FE                     __end_of__initialization:	
   148  03FE  0183               	clrf	3
   149  03FF  2B33               	ljmp	_main	;jump to C main() function
   150                           
   151                           	psect	cstackCOMMON
   152  0000                     __pcstackCOMMON:	
   153  0000                     ??_Lcd_Port:	
   154  0000                     ??_Lcd_Clear:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0000                     ??_Lcd_Set_Cursor:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0000                     ??___wmul:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0000                     ??___lwdiv:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0000                     ??___lwmod:	
   167                           ; 1 bytes @ 0x0
   168                           
   169                           
   170                           	psect	cstackBANK0
   171  000C                     __pcstackBANK0:	
   172                           ; 1 bytes @ 0x0
   173                           
   174  000C                     ?_Lcd_Port:	
   175  000C                     ?_Lcd_Cmd:	
   176                           ; 1 bytes @ 0x0
   177                           
   178  000C                     ?_Lcd_Clear:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  000C                     ?_Lcd_Init:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  000C                     ?_Lcd_Write_Char:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  000C                     ?_Lcd_Write_String:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  000C                     ?_main:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  000C                     ?___wmul:	
   194                           ; 2 bytes @ 0x0
   195                           
   196  000C                     ?___lwdiv:	
   197                           ; 2 bytes @ 0x0
   198                           
   199  000C                     Lcd_Port@a:	
   200                           ; 2 bytes @ 0x0
   201                           
   202  000C                     ___wmul@multiplier:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  000C                     ___lwdiv@divisor:	
   206                           ; 2 bytes @ 0x0
   207                           
   208                           
   209                           ; 2 bytes @ 0x0
   210  000C                     	ds	1
   211  000D                     ??_Lcd_Cmd:	
   212  000D                     ??_Lcd_Write_Char:	
   213                           ; 1 bytes @ 0x1
   214                           
   215                           
   216                           ; 1 bytes @ 0x1
   217  000D                     	ds	1
   218  000E                     Lcd_Write_Char@temp:	
   219  000E                     ___wmul@multiplicand:	
   220                           ; 1 bytes @ 0x2
   221                           
   222  000E                     ___lwdiv@dividend:	
   223                           ; 2 bytes @ 0x2
   224                           
   225                           
   226                           ; 2 bytes @ 0x2
   227  000E                     	ds	1
   228  000F                     Lcd_Cmd@a:	
   229  000F                     Lcd_Write_Char@y:	
   230                           ; 1 bytes @ 0x3
   231                           
   232                           
   233                           ; 1 bytes @ 0x3
   234  000F                     	ds	1
   235  0010                     ?_Lcd_Set_Cursor:	
   236  0010                     ??_Lcd_Init:	
   237                           ; 1 bytes @ 0x4
   238                           
   239  0010                     Lcd_Set_Cursor@b:	
   240                           ; 1 bytes @ 0x4
   241                           
   242  0010                     Lcd_Write_Char@a:	
   243                           ; 1 bytes @ 0x4
   244                           
   245  0010                     ___wmul@product:	
   246                           ; 1 bytes @ 0x4
   247                           
   248  0010                     ___lwdiv@quotient:	
   249                           ; 2 bytes @ 0x4
   250                           
   251                           
   252                           ; 2 bytes @ 0x4
   253  0010                     	ds	1
   254  0011                     ??_Lcd_Write_String:	
   255  0011                     Lcd_Set_Cursor@a:	
   256                           ; 1 bytes @ 0x5
   257                           
   258                           
   259                           ; 1 bytes @ 0x5
   260  0011                     	ds	1
   261  0012                     Lcd_Set_Cursor@z:	
   262  0012                     ___lwdiv@counter:	
   263                           ; 1 bytes @ 0x6
   264                           
   265  0012                     Lcd_Write_String@i:	
   266                           ; 1 bytes @ 0x6
   267                           
   268                           
   269                           ; 2 bytes @ 0x6
   270  0012                     	ds	1
   271  0013                     ?___lwmod:	
   272  0013                     Lcd_Set_Cursor@y:	
   273                           ; 2 bytes @ 0x7
   274                           
   275  0013                     ___lwmod@divisor:	
   276                           ; 1 bytes @ 0x7
   277                           
   278                           
   279                           ; 2 bytes @ 0x7
   280  0013                     	ds	1
   281  0014                     Lcd_Set_Cursor@temp:	
   282  0014                     Lcd_Write_String@a:	
   283                           ; 1 bytes @ 0x8
   284                           
   285                           
   286                           ; 1 bytes @ 0x8
   287  0014                     	ds	1
   288  0015                     ___lwmod@dividend:	
   289                           
   290                           ; 2 bytes @ 0x9
   291  0015                     	ds	2
   292  0017                     ___lwmod@counter:	
   293                           
   294                           ; 1 bytes @ 0xB
   295  0017                     	ds	1
   296  0018                     ?_sprintf:	
   297  0018                     sprintf@f:	
   298                           ; 2 bytes @ 0xC
   299                           
   300                           
   301                           ; 1 bytes @ 0xC
   302  0018                     	ds	3
   303  001B                     ??_sprintf:	
   304                           
   305                           ; 1 bytes @ 0xF
   306  001B                     	ds	2
   307  001D                     sprintf@ap:	
   308                           
   309                           ; 1 bytes @ 0x11
   310  001D                     	ds	1
   311  001E                     sprintf@flag:	
   312                           
   313                           ; 1 bytes @ 0x12
   314  001E                     	ds	1
   315  001F                     sprintf@prec:	
   316                           
   317                           ; 1 bytes @ 0x13
   318  001F                     	ds	1
   319  0020                     sprintf@val:	
   320                           
   321                           ; 2 bytes @ 0x14
   322  0020                     	ds	2
   323  0022                     sprintf@sp:	
   324                           
   325                           ; 1 bytes @ 0x16
   326  0022                     	ds	1
   327  0023                     sprintf@c:	
   328                           
   329                           ; 1 bytes @ 0x17
   330  0023                     	ds	1
   331  0024                     ??_main:	
   332                           
   333                           ; 1 bytes @ 0x18
   334  0024                     	ds	20
   335  0038                     main@str:	
   336                           
   337                           ; 10 bytes @ 0x2C
   338  0038                     	ds	10
   339  0042                     main@x1:	
   340                           
   341                           ; 2 bytes @ 0x36
   342  0042                     	ds	2
   343  0044                     main@x2:	
   344                           
   345                           ; 2 bytes @ 0x38
   346  0044                     	ds	2
   347                           
   348                           	psect	maintext
   349  0333                     __pmaintext:	
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 20, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 20 in file "newmain.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  str            10   44[BANK0 ] unsigned char [10]
   360 ;;  x2              2   56[BANK0 ] int 
   361 ;;  x1              2   54[BANK0 ] int 
   362 ;; Return value:  Size  Location     Type
   363 ;;                  2   65[None  ] int 
   364 ;; Registers used:
   365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   366 ;; Tracked objects:
   367 ;;		On entry : B00/0
   368 ;;		On exit  : 0/0
   369 ;;		Unchanged: 0/0
   370 ;; Data sizes:     COMMON   BANK0
   371 ;;      Params:         0       0
   372 ;;      Locals:         0      14
   373 ;;      Temps:          0      20
   374 ;;      Totals:         0      34
   375 ;;Total ram usage:       34 bytes
   376 ;; Hardware stack levels required when called:    3
   377 ;; This function calls:
   378 ;;		_Lcd_Clear
   379 ;;		_Lcd_Init
   380 ;;		_Lcd_Set_Cursor
   381 ;;		_Lcd_Write_String
   382 ;;		___wmul
   383 ;;		_sprintf
   384 ;; This function is called by:
   385 ;;		Startup code after reset
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _main
   391  0333                     _main:	
   392                           
   393                           ;newmain.c: 22: TRISB = 0x00;
   394                           
   395                           ;incstack = 0
   396                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   397  0333  1683               	bsf	3,5	;RP0=1, select bank1
   398  0334  0186               	clrf	6	;volatile
   399                           
   400                           ;newmain.c: 23: TRISB2 = 1;
   401  0335  1506               	bsf	6,2	;volatile
   402                           
   403                           ;newmain.c: 24: TRISA = 0xFF;
   404  0336  30FF               	movlw	255
   405  0337  0085               	movwf	5	;volatile
   406                           
   407                           ;newmain.c: 26: Lcd_Init();
   408  0338  2283               	fcall	_Lcd_Init
   409  0339                     l1037:	
   410                           
   411                           ;newmain.c: 27: Lcd_Clear();
   412  0339  21A0               	fcall	_Lcd_Clear
   413  033A                     l1039:	
   414                           
   415                           ;newmain.c: 34: {
   416                           ;newmain.c: 35: if(PORTBbits.RB2){
   417  033A  1D06               	btfss	6,2	;volatile
   418  033B  2B3A               	goto	l1039
   419                           
   420                           ;newmain.c: 36: x1 = PORTAbits.RA4<<4 | PORTAbits.RA3<<3 | PORTAbits.RA2<<2 | PORTAbits.
      +                          RA1<<1 | PORTAbits.RA0;
   421  033C  23B0               	fcall	PL2	;call to abstracted procedure
   422  033D  00C2               	movwf	main@x1
   423  033E  0837               	movf	??_main+19,w
   424  033F  00C3               	movwf	main@x1+1
   425                           
   426                           ;newmain.c: 38: sprintf(str,"1. = %d",x1);
   427  0340  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   428  0341  0098               	movwf	sprintf@f
   429  0342  0843               	movf	main@x1+1,w
   430  0343  009A               	movwf	?_sprintf+2
   431  0344  0842               	movf	main@x1,w
   432  0345  0099               	movwf	?_sprintf+1
   433  0346  3038               	movlw	(low (main@str| 0))& (0+255)
   434  0347  22B3               	fcall	_sprintf
   435  0348  3001               	movlw	1
   436                           
   437                           ;newmain.c: 39: Lcd_Set_Cursor(1,1);
   438  0349  0190               	clrf	Lcd_Set_Cursor@b
   439  034A  0A90               	incf	Lcd_Set_Cursor@b,f
   440  034B  21FB               	fcall	_Lcd_Set_Cursor
   441                           
   442                           ;newmain.c: 40: Lcd_Write_String(str);
   443  034C  3038               	movlw	(low (main@str| 0))& (0+255)
   444  034D  21B6               	fcall	_Lcd_Write_String
   445                           
   446                           ;newmain.c: 42: _delay((unsigned long)((1600)*(4000000/4000.0)));
   447  034E  3009               	movlw	9
   448  034F  00A6               	movwf	??_main+2
   449  0350  301E               	movlw	30
   450  0351  00A5               	movwf	??_main+1
   451  0352  30E4               	movlw	228
   452  0353  00A4               	movwf	??_main
   453  0354                     u537:	
   454  0354  0BA4               	decfsz	??_main,f
   455  0355  2B54               	goto	u537
   456  0356  0BA5               	decfsz	??_main+1,f
   457  0357  2B54               	goto	u537
   458  0358  0BA6               	decfsz	??_main+2,f
   459  0359  2B54               	goto	u537
   460  035A  0000               	nop
   461  035B                     l68:	
   462                           ;newmain.c: 44: while(!PORTBbits.RB2);
   463                           
   464  035B  1283               	bcf	3,5	;RP0=0, select bank0
   465  035C  1D06               	btfss	6,2	;volatile
   466  035D  2B5B               	goto	l68
   467                           
   468                           ;newmain.c: 45: x2 = PORTAbits.RA4<<4 | PORTAbits.RA3<<3 | PORTAbits.RA2<<2 | PORTAbits.
      +                          RA1<<1 | PORTAbits.RA0;
   469  035E  23B0               	fcall	PL2	;call to abstracted procedure
   470  035F  00C4               	movwf	main@x2
   471  0360  0837               	movf	??_main+19,w
   472  0361  00C5               	movwf	main@x2+1
   473                           
   474                           ;newmain.c: 48: sprintf(str,"2. = %d",x2);
   475  0362  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   476  0363  0098               	movwf	sprintf@f
   477  0364  0845               	movf	main@x2+1,w
   478  0365  009A               	movwf	?_sprintf+2
   479  0366  0844               	movf	main@x2,w
   480  0367  0099               	movwf	?_sprintf+1
   481  0368  3038               	movlw	(low (main@str| 0))& (0+255)
   482  0369  22B3               	fcall	_sprintf
   483                           
   484                           ;newmain.c: 49: Lcd_Set_Cursor(1,8);
   485  036A  3008               	movlw	8
   486  036B  0090               	movwf	Lcd_Set_Cursor@b
   487  036C  3001               	movlw	1
   488  036D  21FB               	fcall	_Lcd_Set_Cursor
   489                           
   490                           ;newmain.c: 50: Lcd_Write_String(str);
   491  036E  3038               	movlw	(low (main@str| 0))& (0+255)
   492  036F  21B6               	fcall	_Lcd_Write_String
   493  0370  3002               	movlw	2
   494                           
   495                           ;newmain.c: 53: Lcd_Set_Cursor(2,1);
   496  0371  0190               	clrf	Lcd_Set_Cursor@b
   497  0372  0A90               	incf	Lcd_Set_Cursor@b,f
   498  0373  21FB               	fcall	_Lcd_Set_Cursor
   499                           
   500                           ;newmain.c: 56: sprintf(str,"%d",x1+x2);
   501  0374  301E               	movlw	(low (((STR_4+3)-__stringbase)| (0+32768)))& (0+255)
   502  0375  0098               	movwf	sprintf@f
   503  0376  0844               	movf	main@x2,w
   504  0377  0742               	addwf	main@x1,w
   505  0378  0099               	movwf	?_sprintf+1
   506  0379  0845               	movf	main@x2+1,w
   507  037A  1803               	skipnc
   508  037B  0A45               	incf	main@x2+1,w
   509  037C  0743               	addwf	main@x1+1,w
   510  037D  009A               	movwf	?_sprintf+2
   511  037E  3038               	movlw	(low (main@str| 0))& (0+255)
   512  037F  22B3               	fcall	_sprintf
   513                           
   514                           ;newmain.c: 57: Lcd_Write_String(str);
   515  0380  3038               	movlw	(low (main@str| 0))& (0+255)
   516  0381  21B6               	fcall	_Lcd_Write_String
   517                           
   518                           ;newmain.c: 60: sprintf(str," : %d",x1-x2);
   519  0382  301B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   520  0383  0098               	movwf	sprintf@f
   521  0384  0844               	movf	main@x2,w
   522  0385  0242               	subwf	main@x1,w
   523  0386  0099               	movwf	?_sprintf+1
   524  0387  0845               	movf	main@x2+1,w
   525  0388  1C03               	skipc
   526  0389  0A45               	incf	main@x2+1,w
   527  038A  0243               	subwf	main@x1+1,w
   528  038B  009A               	movwf	?_sprintf+2
   529  038C  3038               	movlw	(low (main@str| 0))& (0+255)
   530  038D  22B3               	fcall	_sprintf
   531                           
   532                           ;newmain.c: 61: Lcd_Write_String(str);
   533  038E  3038               	movlw	(low (main@str| 0))& (0+255)
   534  038F  21B6               	fcall	_Lcd_Write_String
   535                           
   536                           ;newmain.c: 64: sprintf(str," : %d",x1*x2);
   537  0390  301B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   538  0391  0098               	movwf	sprintf@f
   539  0392  0843               	movf	main@x1+1,w
   540  0393  008D               	movwf	___wmul@multiplier+1
   541  0394  0842               	movf	main@x1,w
   542  0395  008C               	movwf	___wmul@multiplier
   543  0396  0845               	movf	main@x2+1,w
   544  0397  008F               	movwf	___wmul@multiplicand+1
   545  0398  0844               	movf	main@x2,w
   546  0399  008E               	movwf	___wmul@multiplicand
   547  039A  21E2               	fcall	___wmul
   548  039B  080D               	movf	?___wmul+1,w
   549  039C  009A               	movwf	?_sprintf+2
   550  039D  080C               	movf	?___wmul,w
   551  039E  0099               	movwf	?_sprintf+1
   552  039F  3038               	movlw	(low (main@str| 0))& (0+255)
   553  03A0  22B3               	fcall	_sprintf
   554                           
   555                           ;newmain.c: 65: Lcd_Write_String(str);
   556  03A1  3038               	movlw	(low (main@str| 0))& (0+255)
   557  03A2  21B6               	fcall	_Lcd_Write_String
   558                           
   559                           ;newmain.c: 67: _delay((unsigned long)((9000)*(4000000/4000.0)));
   560  03A3  302E               	movlw	46
   561  03A4  00A6               	movwf	??_main+2
   562  03A5  30A9               	movlw	169
   563  03A6  00A5               	movwf	??_main+1
   564  03A7  302F               	movlw	47
   565  03A8  00A4               	movwf	??_main
   566  03A9                     u547:	
   567  03A9  0BA4               	decfsz	??_main,f
   568  03AA  2BA9               	goto	u547
   569  03AB  0BA5               	decfsz	??_main+1,f
   570  03AC  2BA9               	goto	u547
   571  03AD  0BA6               	decfsz	??_main+2,f
   572  03AE  2BA9               	goto	u547
   573  03AF  2B39               	goto	l1037
   574  03B0                     __end_of_main:	
   575  03B0                     PL2:	
   576  03B0  0805               	movf	5,w	;volatile
   577  03B1  3901               	andlw	1
   578  03B2  00A4               	movwf	??_main
   579  03B3  01A5               	clrf	??_main+1
   580  03B4  0C05               	rrf	5,w	;volatile
   581  03B5  3901               	andlw	1
   582  03B6  00A6               	movwf	??_main+2
   583  03B7  01A7               	clrf	??_main+3
   584  03B8  1003               	clrc
   585  03B9  0DA6               	rlf	??_main+2,f
   586  03BA  0DA7               	rlf	??_main+3,f
   587  03BB  0C05               	rrf	5,w	;volatile
   588  03BC  00A8               	movwf	??_main+4
   589  03BD  0C28               	rrf	??_main+4,w
   590  03BE  3901               	andlw	1
   591  03BF  00A9               	movwf	??_main+5
   592  03C0  01AA               	clrf	??_main+6
   593  03C1  1003               	clrc
   594  03C2  0DA9               	rlf	??_main+5,f
   595  03C3  0DAA               	rlf	??_main+6,f
   596  03C4  1003               	clrc
   597  03C5  0DA9               	rlf	??_main+5,f
   598  03C6  0DAA               	rlf	??_main+6,f
   599  03C7  0C05               	rrf	5,w	;volatile
   600  03C8  00AB               	movwf	??_main+7
   601  03C9  0CAB               	rrf	??_main+7,f
   602  03CA  0C2B               	rrf	??_main+7,w
   603  03CB  3901               	andlw	1
   604  03CC  00AC               	movwf	??_main+8
   605  03CD  01AD               	clrf	??_main+9
   606  03CE  1003               	clrc
   607  03CF  0DAC               	rlf	??_main+8,f
   608  03D0  0DAD               	rlf	??_main+9,f
   609  03D1  1003               	clrc
   610  03D2  0DAC               	rlf	??_main+8,f
   611  03D3  0DAD               	rlf	??_main+9,f
   612  03D4  1003               	clrc
   613  03D5  0DAC               	rlf	??_main+8,f
   614  03D6  0DAD               	rlf	??_main+9,f
   615  03D7  0E05               	swapf	5,w	;volatile
   616  03D8  3901               	andlw	1
   617  03D9  00AE               	movwf	??_main+10
   618  03DA  30F0               	movlw	240
   619  03DB  01AF               	clrf	??_main+11
   620  03DC  0EAE               	swapf	??_main+10,f
   621  03DD  0EAF               	swapf	??_main+11,f
   622  03DE  05AF               	andwf	??_main+11,f
   623  03DF  082E               	movf	??_main+10,w
   624  03E0  390F               	andlw	15
   625  03E1  04AF               	iorwf	??_main+11,f
   626  03E2  30F0               	movlw	240
   627  03E3  05AE               	andwf	??_main+10,f
   628  03E4  082C               	movf	??_main+8,w
   629  03E5  042E               	iorwf	??_main+10,w
   630  03E6  00B0               	movwf	??_main+12
   631  03E7  082D               	movf	??_main+9,w
   632  03E8  042F               	iorwf	??_main+11,w
   633  03E9  00B1               	movwf	??_main+13
   634  03EA  0829               	movf	??_main+5,w
   635  03EB  0430               	iorwf	??_main+12,w
   636  03EC  00B2               	movwf	??_main+14
   637  03ED  082A               	movf	??_main+6,w
   638  03EE  0431               	iorwf	??_main+13,w
   639  03EF  00B3               	movwf	??_main+15
   640  03F0  0826               	movf	??_main+2,w
   641  03F1  0432               	iorwf	??_main+14,w
   642  03F2  00B4               	movwf	??_main+16
   643  03F3  0827               	movf	??_main+3,w
   644  03F4  0433               	iorwf	??_main+15,w
   645  03F5  00B5               	movwf	??_main+17
   646  03F6  0824               	movf	??_main,w
   647  03F7  0434               	iorwf	??_main+16,w
   648  03F8  00B6               	movwf	??_main+18
   649  03F9  0825               	movf	??_main+1,w
   650  03FA  0435               	iorwf	??_main+17,w
   651  03FB  00B7               	movwf	??_main+19
   652  03FC  0836               	movf	??_main+18,w
   653  03FD  0008               	return
   654  03FE                     __end_ofPL2:	
   655                           
   656                           	psect	text1
   657  02B3                     __ptext1:	
   658 ;; *************** function _sprintf *****************
   659 ;; Defined at:
   660 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  sp              1    wreg     PTR unsigned char 
   663 ;;		 -> main@str(10), 
   664 ;;  f               1   12[BANK0 ] PTR const unsigned char 
   665 ;;		 -> STR_5(6), STR_4(6), STR_3(3), STR_2(8), 
   666 ;;		 -> STR_1(8), 
   667 ;; Auto vars:     Size  Location     Type
   668 ;;  sp              1   22[BANK0 ] PTR unsigned char 
   669 ;;		 -> main@str(10), 
   670 ;;  tmpval          4    0        struct .
   671 ;;  val             2   20[BANK0 ] unsigned int 
   672 ;;  cp              2    0        PTR const unsigned char 
   673 ;;  len             2    0        unsigned int 
   674 ;;  c               1   23[BANK0 ] char 
   675 ;;  prec            1   19[BANK0 ] char 
   676 ;;  flag            1   18[BANK0 ] unsigned char 
   677 ;;  ap              1   17[BANK0 ] PTR void [1]
   678 ;;		 -> ?_sprintf(2), 
   679 ;; Return value:  Size  Location     Type
   680 ;;                  2   12[BANK0 ] int 
   681 ;; Registers used:
   682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : 100/0
   685 ;;		On exit  : 900/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0
   688 ;;      Params:         0       3
   689 ;;      Locals:         0       7
   690 ;;      Temps:          0       2
   691 ;;      Totals:         0      12
   692 ;;Total ram usage:       12 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    1
   695 ;; This function calls:
   696 ;;		___lwdiv
   697 ;;		___lwmod
   698 ;; This function is called by:
   699 ;;		_main
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           
   704                           ;psect for function _sprintf
   705  02B3                     _sprintf:	
   706                           
   707                           ;incstack = 0
   708                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   709                           ;sprintf@sp stored from wreg
   710  02B3  00A2               	movwf	sprintf@sp
   711                           
   712                           ;doprnt.c: 494: va_list ap;
   713                           ;doprnt.c: 499: signed char c;
   714                           ;doprnt.c: 506: signed char prec;
   715                           ;doprnt.c: 508: unsigned char flag;
   716                           ;doprnt.c: 523: union {
   717                           ;doprnt.c: 524: unsigned long vd;
   718                           ;doprnt.c: 525: double integ;
   719                           ;doprnt.c: 526: } tmpval;
   720                           ;doprnt.c: 528: unsigned int val;
   721                           ;doprnt.c: 529: unsigned len;
   722                           ;doprnt.c: 530: const char * cp;
   723                           ;doprnt.c: 533: *ap = __va_start();
   724  02B4  3019               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   725  02B5  009D               	movwf	sprintf@ap
   726  02B6                     l1007:	
   727                           ;doprnt.c: 536: while(c = *f++) {
   728                           
   729  02B6  0818               	movf	sprintf@f,w
   730  02B7  0A98               	incf	sprintf@f,f
   731  02B8  0084               	movwf	4
   732  02B9  2001               	fcall	stringdir
   733  02BA  00A3               	movwf	sprintf@c
   734  02BB  0823               	movf	sprintf@c,w
   735  02BC  1903               	btfsc	3,2
   736  02BD  2B27               	goto	l1009
   737                           
   738                           ;doprnt.c: 538: if(c != '%')
   739  02BE  3025               	movlw	37
   740  02BF  0623               	xorwf	sprintf@c,w
   741  02C0  1903               	btfsc	3,2
   742  02C1  2AC4               	goto	l961
   743                           
   744                           ;doprnt.c: 540: {
   745                           ;doprnt.c: 541: ((*sp++ = (c)));
   746  02C2  232C               	fcall	PL6	;call to abstracted procedure
   747                           
   748                           ;doprnt.c: 542: continue;
   749  02C3  2AB6               	goto	l1007
   750  02C4                     l961:	
   751                           
   752                           ;doprnt.c: 543: }
   753                           ;doprnt.c: 548: flag = 0;
   754  02C4  019E               	clrf	sprintf@flag
   755                           
   756                           ;doprnt.c: 635: switch(c = *f++) {
   757  02C5  0818               	movf	sprintf@f,w
   758  02C6  0A98               	incf	sprintf@f,f
   759  02C7  0084               	movwf	4
   760  02C8  2001               	fcall	stringdir
   761  02C9  00A3               	movwf	sprintf@c
   762                           
   763                           ; Switch size 1, requested type "space"
   764                           ; Number of cases is 3, Range of values is 0 to 105
   765                           ; switch strategies available:
   766                           ; Name         Instructions Cycles
   767                           ; simple_byte           10     6 (average)
   768                           ; direct_byte          112     6 (fixed)
   769                           ; jumptable            260     6 (fixed)
   770                           ;	Chosen strategy is simple_byte
   771  02CA  3A00               	xorlw	0	; case 0
   772  02CB  1903               	skipnz
   773  02CC  2B27               	goto	l1009
   774  02CD  3A64               	xorlw	100	; case 100
   775  02CE  1903               	skipnz
   776  02CF  2AD4               	goto	l967
   777  02D0  3A0D               	xorlw	13	; case 105
   778  02D1  1903               	skipnz
   779  02D2  2AD4               	goto	l967
   780  02D3  2AB6               	goto	l1007
   781  02D4                     l967:	
   782                           
   783                           ;doprnt.c: 1253: {
   784                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   785  02D4  081D               	movf	sprintf@ap,w
   786  02D5  0084               	movwf	4
   787  02D6  1383               	bcf	3,7	;select IRP bank0
   788  02D7  0800               	movf	0,w
   789  02D8  00A0               	movwf	sprintf@val
   790  02D9  0A84               	incf	4,f
   791  02DA  0800               	movf	0,w
   792  02DB  00A1               	movwf	sprintf@val+1
   793  02DC  0A9D               	incf	sprintf@ap,f
   794  02DD  0A9D               	incf	sprintf@ap,f
   795                           
   796                           ;doprnt.c: 1261: if((int)val < 0) {
   797  02DE  1FA1               	btfss	sprintf@val+1,7
   798  02DF  2AE7               	goto	l977
   799                           
   800                           ;doprnt.c: 1262: flag |= 0x03;
   801  02E0  3003               	movlw	3
   802  02E1  049E               	iorwf	sprintf@flag,f
   803                           
   804                           ;doprnt.c: 1263: val = -val;
   805  02E2  09A0               	comf	sprintf@val,f
   806  02E3  09A1               	comf	sprintf@val+1,f
   807  02E4  0AA0               	incf	sprintf@val,f
   808  02E5  1903               	skipnz
   809  02E6  0AA1               	incf	sprintf@val+1,f
   810  02E7                     l977:	
   811                           
   812                           ;doprnt.c: 1264: }
   813                           ;doprnt.c: 1266: }
   814                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   815  02E7  01A3               	clrf	sprintf@c
   816  02E8  0AA3               	incf	sprintf@c,f
   817  02E9                     l983:	
   818                           
   819                           ;doprnt.c: 1306: if(val < dpowers[c])
   820  02E9  1003               	clrc
   821  02EA  0D23               	rlf	sprintf@c,w
   822  02EB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   823  02EC  0084               	movwf	4
   824  02ED  2001               	fcall	stringdir
   825  02EE  009B               	movwf	??_sprintf
   826  02EF  2001               	fcall	stringdir
   827  02F0  009C               	movwf	??_sprintf+1
   828  02F1  0221               	subwf	sprintf@val+1,w
   829  02F2  1D03               	skipz
   830  02F3  2AF6               	goto	u445
   831  02F4  081B               	movf	??_sprintf,w
   832  02F5  0220               	subwf	sprintf@val,w
   833  02F6                     u445:	
   834  02F6  1C03               	btfss	3,0
   835  02F7  2AFD               	goto	l991
   836  02F8  3005               	movlw	5
   837  02F9  0AA3               	incf	sprintf@c,f
   838  02FA  0623               	xorwf	sprintf@c,w
   839  02FB  1D03               	btfss	3,2
   840  02FC  2AE9               	goto	l983
   841  02FD                     l991:	
   842                           
   843                           ;doprnt.c: 1422: {
   844                           ;doprnt.c: 1438: if(flag & 0x03)
   845  02FD  081E               	movf	sprintf@flag,w
   846  02FE  3903               	andlw	3
   847  02FF  1903               	btfsc	3,2
   848  0300  2B07               	goto	l997
   849                           
   850                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   851  0301  0822               	movf	sprintf@sp,w
   852  0302  0084               	movwf	4
   853  0303  302D               	movlw	45
   854  0304  1383               	bcf	3,7	;select IRP bank0
   855  0305  0080               	movwf	0
   856  0306  0AA2               	incf	sprintf@sp,f
   857  0307                     l997:	
   858                           
   859                           ;doprnt.c: 1469: }
   860                           ;doprnt.c: 1472: prec = c;
   861  0307  0823               	movf	sprintf@c,w
   862  0308  009F               	movwf	sprintf@prec
   863                           
   864                           ;doprnt.c: 1474: while(prec--) {
   865  0309  2B23               	goto	l1005
   866  030A                     l999:	
   867                           
   868                           ;doprnt.c: 1478: {
   869                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   870  030A  300A               	movlw	10
   871  030B  0093               	movwf	___lwmod@divisor
   872  030C  0194               	clrf	___lwmod@divisor+1
   873  030D  1003               	clrc
   874  030E  0D1F               	rlf	sprintf@prec,w
   875  030F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   876  0310  0084               	movwf	4
   877  0311  2001               	fcall	stringdir
   878  0312  008C               	movwf	___lwdiv@divisor
   879  0313  2001               	fcall	stringdir
   880  0314  008D               	movwf	___lwdiv@divisor+1
   881  0315  0821               	movf	sprintf@val+1,w
   882  0316  008F               	movwf	___lwdiv@dividend+1
   883  0317  0820               	movf	sprintf@val,w
   884  0318  008E               	movwf	___lwdiv@dividend
   885  0319  2259               	fcall	___lwdiv
   886  031A  080D               	movf	?___lwdiv+1,w
   887  031B  0096               	movwf	___lwmod@dividend+1
   888  031C  080C               	movf	?___lwdiv,w
   889  031D  0095               	movwf	___lwmod@dividend
   890  031E  2235               	fcall	___lwmod
   891  031F  0813               	movf	?___lwmod,w
   892  0320  3E30               	addlw	48
   893  0321  00A3               	movwf	sprintf@c
   894                           
   895                           ;doprnt.c: 1523: }
   896                           ;doprnt.c: 1524: ((*sp++ = (c)));
   897  0322  232C               	fcall	PL6	;call to abstracted procedure
   898  0323                     l1005:	
   899  0323  039F               	decf	sprintf@prec,f
   900  0324  0F1F               	incfsz	sprintf@prec,w
   901  0325  2B0A               	goto	l999
   902  0326  2AB6               	goto	l1007
   903  0327                     l1009:	
   904                           
   905                           ;doprnt.c: 1538: *sp = 0;
   906  0327  0822               	movf	sprintf@sp,w
   907  0328  0084               	movwf	4
   908  0329  1383               	bcf	3,7	;select IRP bank0
   909  032A  0180               	clrf	0
   910  032B  0008               	return
   911  032C                     __end_of_sprintf:	
   912  032C                     PL6:	
   913  032C  0822               	movf	sprintf@sp,w
   914  032D  0084               	movwf	4
   915  032E  0823               	movf	sprintf@c,w
   916  032F  1383               	bcf	3,7	;select IRP bank0
   917  0330  0080               	movwf	0
   918  0331  0AA2               	incf	sprintf@sp,f
   919  0332  0008               	return
   920  0333                     __end_ofPL6:	
   921                           
   922                           	psect	text2
   923  0235                     __ptext2:	
   924 ;; *************** function ___lwmod *****************
   925 ;; Defined at:
   926 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  divisor         2    7[BANK0 ] unsigned int 
   929 ;;  dividend        2    9[BANK0 ] unsigned int 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  counter         1   11[BANK0 ] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  2    7[BANK0 ] unsigned int 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0
   936 ;; Tracked objects:
   937 ;;		On entry : 100/0
   938 ;;		On exit  : 100/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0
   941 ;;      Params:         0       4
   942 ;;      Locals:         0       1
   943 ;;      Temps:          0       0
   944 ;;      Totals:         0       5
   945 ;;Total ram usage:        5 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_sprintf
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           
   955                           ;psect for function ___lwmod
   956  0235                     ___lwmod:	
   957                           
   958                           ;incstack = 0
   959                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   960  0235  0813               	movf	___lwmod@divisor,w
   961  0236  0414               	iorwf	___lwmod@divisor+1,w
   962  0237  1903               	btfsc	3,2
   963  0238  2A54               	goto	l905
   964  0239  0197               	clrf	___lwmod@counter
   965  023A                     L1:	
   966  023A  0A97               	incf	___lwmod@counter,f
   967  023B  1B94               	btfsc	___lwmod@divisor+1,7
   968  023C  2A41               	goto	l897
   969  023D  1003               	clrc
   970  023E  0D93               	rlf	___lwmod@divisor,f
   971  023F  0D94               	rlf	___lwmod@divisor+1,f
   972  0240  2A3A               	goto	L1
   973  0241                     l897:	
   974  0241  0814               	movf	___lwmod@divisor+1,w
   975  0242  0216               	subwf	___lwmod@dividend+1,w
   976  0243  1D03               	skipz
   977  0244  2A47               	goto	u375
   978  0245  0813               	movf	___lwmod@divisor,w
   979  0246  0215               	subwf	___lwmod@dividend,w
   980  0247                     u375:	
   981  0247  1C03               	skipc
   982  0248  2A50               	goto	L2
   983  0249  0813               	movf	___lwmod@divisor,w
   984  024A  0295               	subwf	___lwmod@dividend,f
   985  024B  0814               	movf	___lwmod@divisor+1,w
   986  024C  1C03               	skipc
   987  024D  0396               	decf	___lwmod@dividend+1,f
   988  024E  0296               	subwf	___lwmod@dividend+1,f
   989  024F  1003               	clrc
   990  0250                     L2:	
   991  0250  0C94               	rrf	___lwmod@divisor+1,f
   992  0251  0C93               	rrf	___lwmod@divisor,f
   993  0252  0B97               	decfsz	___lwmod@counter,f
   994  0253  2A41               	goto	l897
   995  0254                     l905:	
   996  0254  0816               	movf	___lwmod@dividend+1,w
   997  0255  0094               	movwf	?___lwmod+1
   998  0256  0815               	movf	___lwmod@dividend,w
   999  0257  0093               	movwf	?___lwmod
  1000  0258  0008               	return
  1001  0259                     __end_of___lwmod:	
  1002                           
  1003                           	psect	text3
  1004  0259                     __ptext3:	
  1005 ;; *************** function ___lwdiv *****************
  1006 ;; Defined at:
  1007 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  divisor         2    0[BANK0 ] unsigned int 
  1010 ;;  dividend        2    2[BANK0 ] unsigned int 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  quotient        2    4[BANK0 ] unsigned int 
  1013 ;;  counter         1    6[BANK0 ] unsigned char 
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  2    0[BANK0 ] unsigned int 
  1016 ;; Registers used:
  1017 ;;		wreg, status,2, status,0
  1018 ;; Tracked objects:
  1019 ;;		On entry : 100/0
  1020 ;;		On exit  : 100/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMMON   BANK0
  1023 ;;      Params:         0       4
  1024 ;;      Locals:         0       3
  1025 ;;      Temps:          0       0
  1026 ;;      Totals:         0       7
  1027 ;;Total ram usage:        7 bytes
  1028 ;; Hardware stack levels used:    1
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_sprintf
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           
  1037                           ;psect for function ___lwdiv
  1038  0259                     ___lwdiv:	
  1039                           
  1040                           ;incstack = 0
  1041                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1042  0259  0190               	clrf	___lwdiv@quotient
  1043  025A  0191               	clrf	___lwdiv@quotient+1
  1044  025B  080C               	movf	___lwdiv@divisor,w
  1045  025C  040D               	iorwf	___lwdiv@divisor+1,w
  1046  025D  1903               	btfsc	3,2
  1047  025E  2A7E               	goto	l885
  1048  025F  0192               	clrf	___lwdiv@counter
  1049  0260                     L3:	
  1050  0260  0A92               	incf	___lwdiv@counter,f
  1051  0261  1B8D               	btfsc	___lwdiv@divisor+1,7
  1052  0262  2A67               	goto	l873
  1053  0263  1003               	clrc
  1054  0264  0D8C               	rlf	___lwdiv@divisor,f
  1055  0265  0D8D               	rlf	___lwdiv@divisor+1,f
  1056  0266  2A60               	goto	L3
  1057  0267                     l873:	
  1058  0267  1003               	clrc
  1059  0268  0D90               	rlf	___lwdiv@quotient,f
  1060  0269  0D91               	rlf	___lwdiv@quotient+1,f
  1061  026A  080D               	movf	___lwdiv@divisor+1,w
  1062  026B  020F               	subwf	___lwdiv@dividend+1,w
  1063  026C  1D03               	skipz
  1064  026D  2A70               	goto	u335
  1065  026E  080C               	movf	___lwdiv@divisor,w
  1066  026F  020E               	subwf	___lwdiv@dividend,w
  1067  0270                     u335:	
  1068  0270  1C03               	skipc
  1069  0271  2A7A               	goto	L4
  1070  0272  080C               	movf	___lwdiv@divisor,w
  1071  0273  028E               	subwf	___lwdiv@dividend,f
  1072  0274  080D               	movf	___lwdiv@divisor+1,w
  1073  0275  1C03               	skipc
  1074  0276  038F               	decf	___lwdiv@dividend+1,f
  1075  0277  028F               	subwf	___lwdiv@dividend+1,f
  1076  0278  1410               	bsf	___lwdiv@quotient,0
  1077  0279  1003               	clrc
  1078  027A                     L4:	
  1079  027A  0C8D               	rrf	___lwdiv@divisor+1,f
  1080  027B  0C8C               	rrf	___lwdiv@divisor,f
  1081  027C  0B92               	decfsz	___lwdiv@counter,f
  1082  027D  2A67               	goto	l873
  1083  027E                     l885:	
  1084  027E  0811               	movf	___lwdiv@quotient+1,w
  1085  027F  008D               	movwf	?___lwdiv+1
  1086  0280  0810               	movf	___lwdiv@quotient,w
  1087  0281  008C               	movwf	?___lwdiv
  1088  0282  0008               	return
  1089  0283                     __end_of___lwdiv:	
  1090                           
  1091                           	psect	text4
  1092  01E2                     __ptext4:	
  1093 ;; *************** function ___wmul *****************
  1094 ;; Defined at:
  1095 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1098 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  product         2    4[BANK0 ] unsigned int 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2    0[BANK0 ] unsigned int 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0
  1105 ;; Tracked objects:
  1106 ;;		On entry : 900/0
  1107 ;;		On exit  : 900/0
  1108 ;;		Unchanged: 800/0
  1109 ;; Data sizes:     COMMON   BANK0
  1110 ;;      Params:         0       4
  1111 ;;      Locals:         0       2
  1112 ;;      Temps:          0       0
  1113 ;;      Totals:         0       6
  1114 ;;Total ram usage:        6 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_main
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           
  1124                           ;psect for function ___wmul
  1125  01E2                     ___wmul:	
  1126                           
  1127                           ;incstack = 0
  1128                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1129  01E2  0190               	clrf	___wmul@product
  1130  01E3  0191               	clrf	___wmul@product+1
  1131  01E4                     l1015:	
  1132  01E4  1C0C               	btfss	___wmul@multiplier,0
  1133  01E5  29EC               	goto	l1019
  1134  01E6  080E               	movf	___wmul@multiplicand,w
  1135  01E7  0790               	addwf	___wmul@product,f
  1136  01E8  1803               	skipnc
  1137  01E9  0A91               	incf	___wmul@product+1,f
  1138  01EA  080F               	movf	___wmul@multiplicand+1,w
  1139  01EB  0791               	addwf	___wmul@product+1,f
  1140  01EC                     l1019:	
  1141  01EC  1003               	clrc
  1142  01ED  0D8E               	rlf	___wmul@multiplicand,f
  1143  01EE  0D8F               	rlf	___wmul@multiplicand+1,f
  1144  01EF  1003               	clrc
  1145  01F0  0C8D               	rrf	___wmul@multiplier+1,f
  1146  01F1  0C8C               	rrf	___wmul@multiplier,f
  1147  01F2  080C               	movf	___wmul@multiplier,w
  1148  01F3  040D               	iorwf	___wmul@multiplier+1,w
  1149  01F4  1D03               	btfss	3,2
  1150  01F5  29E4               	goto	l1015
  1151  01F6  0811               	movf	___wmul@product+1,w
  1152  01F7  008D               	movwf	?___wmul+1
  1153  01F8  0810               	movf	___wmul@product,w
  1154  01F9  008C               	movwf	?___wmul
  1155  01FA  0008               	return
  1156  01FB                     __end_of___wmul:	
  1157                           
  1158                           	psect	text5
  1159  01B6                     __ptext5:	
  1160 ;; *************** function _Lcd_Write_String *****************
  1161 ;; Defined at:
  1162 ;;		line 99 in file "lcd.h"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  a               1    wreg     PTR unsigned char 
  1165 ;;		 -> main@str(10), 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  a               1    8[BANK0 ] PTR unsigned char 
  1168 ;;		 -> main@str(10), 
  1169 ;;  i               2    6[BANK0 ] int 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 100/0
  1176 ;;		On exit  : 900/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0
  1179 ;;      Params:         0       0
  1180 ;;      Locals:         0       3
  1181 ;;      Temps:          0       1
  1182 ;;      Totals:         0       4
  1183 ;;Total ram usage:        4 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    2
  1186 ;; This function calls:
  1187 ;;		_Lcd_Write_Char
  1188 ;; This function is called by:
  1189 ;;		_main
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           
  1194                           ;psect for function _Lcd_Write_String
  1195  01B6                     _Lcd_Write_String:	
  1196                           
  1197                           ;incstack = 0
  1198                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1199                           ;Lcd_Write_String@a stored from wreg
  1200  01B6  0094               	movwf	Lcd_Write_String@a
  1201                           
  1202                           ;lcd.h: 101: int i;
  1203                           ;lcd.h: 102: for(i=0;a[i]!='\0';i++)
  1204  01B7  0192               	clrf	Lcd_Write_String@i
  1205  01B8  0193               	clrf	Lcd_Write_String@i+1
  1206  01B9                     l951:	
  1207  01B9  0812               	movf	Lcd_Write_String@i,w
  1208  01BA  0714               	addwf	Lcd_Write_String@a,w
  1209  01BB  0091               	movwf	??_Lcd_Write_String
  1210  01BC  0084               	movwf	4
  1211  01BD  1383               	bcf	3,7	;select IRP bank0
  1212  01BE  0800               	movf	0,w
  1213  01BF  1903               	btfsc	3,2
  1214  01C0  0008               	return
  1215                           
  1216                           ;lcd.h: 103: Lcd_Write_Char(a[i]);
  1217  01C1  0812               	movf	Lcd_Write_String@i,w
  1218  01C2  0714               	addwf	Lcd_Write_String@a,w
  1219  01C3  0091               	movwf	??_Lcd_Write_String
  1220  01C4  0084               	movwf	4
  1221  01C5  0800               	movf	0,w
  1222  01C6  2218               	fcall	_Lcd_Write_Char
  1223  01C7  0A92               	incf	Lcd_Write_String@i,f
  1224  01C8  1903               	skipnz
  1225  01C9  0A93               	incf	Lcd_Write_String@i+1,f
  1226  01CA  29B9               	goto	l951
  1227  01CB                     __end_of_Lcd_Write_String:	
  1228                           
  1229                           	psect	text6
  1230  0218                     __ptext6:	
  1231 ;; *************** function _Lcd_Write_Char *****************
  1232 ;; Defined at:
  1233 ;;		line 83 in file "lcd.h"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  a               1    wreg     unsigned char 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  a               1    4[BANK0 ] unsigned char 
  1238 ;;  y               1    3[BANK0 ] unsigned char 
  1239 ;;  temp            1    2[BANK0 ] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0, pclath, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 900/0
  1246 ;;		On exit  : 100/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMMON   BANK0
  1249 ;;      Params:         0       0
  1250 ;;      Locals:         0       3
  1251 ;;      Temps:          0       1
  1252 ;;      Totals:         0       4
  1253 ;;Total ram usage:        4 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    1
  1256 ;; This function calls:
  1257 ;;		_Lcd_Port
  1258 ;; This function is called by:
  1259 ;;		_Lcd_Write_String
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           
  1264                           ;psect for function _Lcd_Write_Char
  1265  0218                     _Lcd_Write_Char:	
  1266                           
  1267                           ;incstack = 0
  1268                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1269                           ;Lcd_Write_Char@a stored from wreg
  1270  0218  0090               	movwf	Lcd_Write_Char@a
  1271                           
  1272                           ;lcd.h: 85: char temp,y;
  1273                           ;lcd.h: 86: temp = a&0x0F;
  1274  0219  008E               	movwf	Lcd_Write_Char@temp
  1275  021A  300F               	movlw	15
  1276  021B  058E               	andwf	Lcd_Write_Char@temp,f
  1277                           
  1278                           ;lcd.h: 87: y = a&0xF0;
  1279  021C  0810               	movf	Lcd_Write_Char@a,w
  1280  021D  008F               	movwf	Lcd_Write_Char@y
  1281  021E  30F0               	movlw	240
  1282  021F  058F               	andwf	Lcd_Write_Char@y,f
  1283                           
  1284                           ;lcd.h: 88: RB0 = 1;
  1285  0220  1406               	bsf	6,0	;volatile
  1286                           
  1287                           ;lcd.h: 89: Lcd_Port(y>>4);
  1288  0221  0E0F               	swapf	Lcd_Write_Char@y,w
  1289  0222  390F               	andlw	15
  1290  0223  21CB               	fcall	_Lcd_Port
  1291                           
  1292                           ;lcd.h: 90: RB1 = 1;
  1293  0224  1486               	bsf	6,1	;volatile
  1294                           
  1295                           ;lcd.h: 91: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1296  0225  300D               	movlw	13
  1297  0226  008D               	movwf	??_Lcd_Write_Char
  1298  0227                     u557:	
  1299  0227  0B8D               	decfsz	??_Lcd_Write_Char,f
  1300  0228  2A27               	goto	u557
  1301                           
  1302                           ;lcd.h: 92: RB1 = 0;
  1303  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1304  022A  1086               	bcf	6,1	;volatile
  1305                           
  1306                           ;lcd.h: 93: Lcd_Port(temp);
  1307  022B  080E               	movf	Lcd_Write_Char@temp,w
  1308  022C  21CB               	fcall	_Lcd_Port
  1309                           
  1310                           ;lcd.h: 94: RB1 = 1;
  1311  022D  1486               	bsf	6,1	;volatile
  1312                           
  1313                           ;lcd.h: 95: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1314  022E  300D               	movlw	13
  1315  022F  008D               	movwf	??_Lcd_Write_Char
  1316  0230                     u567:	
  1317  0230  0B8D               	decfsz	??_Lcd_Write_Char,f
  1318  0231  2A30               	goto	u567
  1319                           
  1320                           ;lcd.h: 96: RB1 = 0;
  1321  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1322  0233  1086               	bcf	6,1	;volatile
  1323  0234  0008               	return
  1324  0235                     __end_of_Lcd_Write_Char:	
  1325                           
  1326                           	psect	text7
  1327  01FB                     __ptext7:	
  1328 ;; *************** function _Lcd_Set_Cursor *****************
  1329 ;; Defined at:
  1330 ;;		line 41 in file "lcd.h"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  a               1    wreg     unsigned char 
  1333 ;;  b               1    4[BANK0 ] unsigned char 
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  a               1    5[BANK0 ] unsigned char 
  1336 ;;  temp            1    8[BANK0 ] unsigned char 
  1337 ;;  y               1    7[BANK0 ] unsigned char 
  1338 ;;  z               1    6[BANK0 ] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2, status,0, pclath, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 900/0
  1345 ;;		On exit  : 100/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMMON   BANK0
  1348 ;;      Params:         0       1
  1349 ;;      Locals:         0       4
  1350 ;;      Temps:          0       0
  1351 ;;      Totals:         0       5
  1352 ;;Total ram usage:        5 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    2
  1355 ;; This function calls:
  1356 ;;		_Lcd_Cmd
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function _Lcd_Set_Cursor
  1364  01FB                     _Lcd_Set_Cursor:	
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1368                           ;Lcd_Set_Cursor@a stored from wreg
  1369  01FB  0091               	movwf	Lcd_Set_Cursor@a
  1370                           
  1371                           ;lcd.h: 43: char temp,z,y;
  1372                           ;lcd.h: 44: if(a == 1)
  1373  01FC  0B11               	decfsz	Lcd_Set_Cursor@a,w
  1374  01FD  2A04               	goto	l923
  1375                           
  1376                           ;lcd.h: 45: {
  1377                           ;lcd.h: 46: temp = 0x80 + b - 1;
  1378  01FE  0810               	movf	Lcd_Set_Cursor@b,w
  1379  01FF  3E7F               	addlw	127
  1380                           
  1381                           ;lcd.h: 47: z = temp>>4;
  1382                           
  1383                           ;lcd.h: 48: y = temp & 0x0F;
  1384                           
  1385                           ;lcd.h: 49: Lcd_Cmd(z);
  1386  0200  220E               	fcall	PL4	;call to abstracted procedure
  1387  0201  21A4               	fcall	_Lcd_Cmd
  1388                           
  1389                           ;lcd.h: 50: Lcd_Cmd(y);
  1390  0202  0813               	movf	Lcd_Set_Cursor@y,w
  1391  0203  29A4               	ljmp	_Lcd_Cmd
  1392  0204                     l923:	
  1393                           ;lcd.h: 51: }
  1394                           
  1395                           
  1396                           ;lcd.h: 52: else if(a == 2)
  1397  0204  3002               	movlw	2
  1398  0205  0611               	xorwf	Lcd_Set_Cursor@a,w
  1399  0206  1D03               	btfss	3,2
  1400  0207  0008               	return
  1401                           
  1402                           ;lcd.h: 53: {
  1403                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  1404  0208  0810               	movf	Lcd_Set_Cursor@b,w
  1405  0209  3EBF               	addlw	191
  1406                           
  1407                           ;lcd.h: 55: z = temp>>4;
  1408                           
  1409                           ;lcd.h: 56: y = temp & 0x0F;
  1410                           
  1411                           ;lcd.h: 57: Lcd_Cmd(z);
  1412  020A  220E               	fcall	PL4	;call to abstracted procedure
  1413  020B  21A4               	fcall	_Lcd_Cmd
  1414                           
  1415                           ;lcd.h: 58: Lcd_Cmd(y);
  1416  020C  0813               	movf	Lcd_Set_Cursor@y,w
  1417  020D  29A4               	ljmp	_Lcd_Cmd
  1418  020E                     __end_of_Lcd_Set_Cursor:	
  1419  020E                     PL4:	
  1420  020E  0094               	movwf	Lcd_Set_Cursor@temp
  1421  020F  0E14               	swapf	Lcd_Set_Cursor@temp,w
  1422  0210  390F               	andlw	15
  1423  0211  0092               	movwf	Lcd_Set_Cursor@z
  1424  0212  0814               	movf	Lcd_Set_Cursor@temp,w
  1425  0213  0093               	movwf	Lcd_Set_Cursor@y
  1426  0214  300F               	movlw	15
  1427  0215  0593               	andwf	Lcd_Set_Cursor@y,f
  1428  0216  0812               	movf	Lcd_Set_Cursor@z,w
  1429  0217  0008               	return
  1430  0218                     __end_ofPL4:	
  1431                           
  1432                           	psect	text8
  1433  0283                     __ptext8:	
  1434 ;; *************** function _Lcd_Init *****************
  1435 ;; Defined at:
  1436 ;;		line 62 in file "lcd.h"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;		None
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;		None
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, status,2, status,0, pclath, cstack
  1445 ;; Tracked objects:
  1446 ;;		On entry : B00/100
  1447 ;;		On exit  : 100/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0
  1450 ;;      Params:         0       0
  1451 ;;      Locals:         0       0
  1452 ;;      Temps:          0       2
  1453 ;;      Totals:         0       2
  1454 ;;Total ram usage:        2 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    2
  1457 ;; This function calls:
  1458 ;;		_Lcd_Cmd
  1459 ;;		_Lcd_Port
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           
  1466                           ;psect for function _Lcd_Init
  1467  0283                     _Lcd_Init:	
  1468                           
  1469                           ;lcd.h: 64: Lcd_Port(0x00);
  1470                           
  1471                           ;incstack = 0
  1472                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1473  0283  3000               	movlw	0
  1474  0284  21CB               	fcall	_Lcd_Port
  1475                           
  1476                           ;lcd.h: 65: _delay((unsigned long)((20)*(4000000/4000.0)));
  1477  0285  301A               	movlw	26
  1478  0286  0091               	movwf	??_Lcd_Init+1
  1479  0287  30F8               	movlw	248
  1480  0288  0090               	movwf	??_Lcd_Init
  1481  0289                     u577:	
  1482  0289  0B90               	decfsz	??_Lcd_Init,f
  1483  028A  2A89               	goto	u577
  1484  028B  0B91               	decfsz	??_Lcd_Init+1,f
  1485  028C  2A89               	goto	u577
  1486  028D  0000               	nop
  1487                           
  1488                           ;lcd.h: 66: Lcd_Cmd(0x03);
  1489  028E  3003               	movlw	3
  1490  028F  21A4               	fcall	_Lcd_Cmd
  1491                           
  1492                           ;lcd.h: 67: _delay((unsigned long)((5)*(4000000/4000.0)));
  1493  0290  3007               	movlw	7
  1494  0291  0091               	movwf	??_Lcd_Init+1
  1495  0292  307D               	movlw	125
  1496  0293  0090               	movwf	??_Lcd_Init
  1497  0294                     u587:	
  1498  0294  0B90               	decfsz	??_Lcd_Init,f
  1499  0295  2A94               	goto	u587
  1500  0296  0B91               	decfsz	??_Lcd_Init+1,f
  1501  0297  2A94               	goto	u587
  1502                           
  1503                           ;lcd.h: 68: Lcd_Cmd(0x03);
  1504  0298  3003               	movlw	3
  1505  0299  21A4               	fcall	_Lcd_Cmd
  1506                           
  1507                           ;lcd.h: 69: _delay((unsigned long)((11)*(4000000/4000.0)));
  1508  029A  300F               	movlw	15
  1509  029B  0091               	movwf	??_Lcd_Init+1
  1510  029C  3047               	movlw	71
  1511  029D  0090               	movwf	??_Lcd_Init
  1512  029E                     u597:	
  1513  029E  0B90               	decfsz	??_Lcd_Init,f
  1514  029F  2A9E               	goto	u597
  1515  02A0  0B91               	decfsz	??_Lcd_Init+1,f
  1516  02A1  2A9E               	goto	u597
  1517  02A2  2AA3               	nop2
  1518                           
  1519                           ;lcd.h: 70: Lcd_Cmd(0x03);
  1520  02A3  3003               	movlw	3
  1521  02A4  21A4               	fcall	_Lcd_Cmd
  1522                           
  1523                           ;lcd.h: 72: Lcd_Cmd(0x02);
  1524  02A5  3002               	movlw	2
  1525  02A6  21A4               	fcall	_Lcd_Cmd
  1526                           
  1527                           ;lcd.h: 73: Lcd_Cmd(0x02);
  1528  02A7  3002               	movlw	2
  1529  02A8  21A4               	fcall	_Lcd_Cmd
  1530                           
  1531                           ;lcd.h: 74: Lcd_Cmd(0x08);
  1532  02A9  3008               	movlw	8
  1533  02AA  21A4               	fcall	_Lcd_Cmd
  1534                           
  1535                           ;lcd.h: 75: Lcd_Cmd(0x00);
  1536  02AB  3000               	movlw	0
  1537  02AC  21A4               	fcall	_Lcd_Cmd
  1538                           
  1539                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  1540  02AD  300C               	movlw	12
  1541  02AE  21A4               	fcall	_Lcd_Cmd
  1542                           
  1543                           ;lcd.h: 77: Lcd_Cmd(0x00);
  1544  02AF  3000               	movlw	0
  1545  02B0  21A4               	fcall	_Lcd_Cmd
  1546                           
  1547                           ;lcd.h: 78: Lcd_Cmd(0x06);
  1548  02B1  3006               	movlw	6
  1549  02B2  29A4               	ljmp	_Lcd_Cmd
  1550  02B3                     __end_of_Lcd_Init:	
  1551                           
  1552                           	psect	text9
  1553  01A0                     __ptext9:	
  1554 ;; *************** function _Lcd_Clear *****************
  1555 ;; Defined at:
  1556 ;;		line 35 in file "lcd.h"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0, pclath, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 100/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMMON   BANK0
  1570 ;;      Params:         0       0
  1571 ;;      Locals:         0       0
  1572 ;;      Temps:          0       0
  1573 ;;      Totals:         0       0
  1574 ;;Total ram usage:        0 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    2
  1577 ;; This function calls:
  1578 ;;		_Lcd_Cmd
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           
  1585                           ;psect for function _Lcd_Clear
  1586  01A0                     _Lcd_Clear:	
  1587                           
  1588                           ;lcd.h: 37: Lcd_Cmd(0);
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1592  01A0  3000               	movlw	0
  1593  01A1  21A4               	fcall	_Lcd_Cmd
  1594                           
  1595                           ;lcd.h: 38: Lcd_Cmd(1);
  1596  01A2  3001               	movlw	1
  1597  01A3  29A4               	ljmp	_Lcd_Cmd
  1598  01A4                     __end_of_Lcd_Clear:	
  1599                           
  1600                           	psect	text10
  1601  01A4                     __ptext10:	
  1602 ;; *************** function _Lcd_Cmd *****************
  1603 ;; Defined at:
  1604 ;;		line 26 in file "lcd.h"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  a               1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  a               1    3[BANK0 ] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, status,2, status,0, pclath, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 100/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMMON   BANK0
  1618 ;;      Params:         0       0
  1619 ;;      Locals:         0       1
  1620 ;;      Temps:          0       2
  1621 ;;      Totals:         0       3
  1622 ;;Total ram usage:        3 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    1
  1625 ;; This function calls:
  1626 ;;		_Lcd_Port
  1627 ;; This function is called by:
  1628 ;;		_Lcd_Clear
  1629 ;;		_Lcd_Set_Cursor
  1630 ;;		_Lcd_Init
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           
  1635                           ;psect for function _Lcd_Cmd
  1636  01A4                     _Lcd_Cmd:	
  1637                           
  1638                           ;incstack = 0
  1639                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1640                           ;Lcd_Cmd@a stored from wreg
  1641  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1642  01A5  008F               	movwf	Lcd_Cmd@a
  1643                           
  1644                           ;lcd.h: 28: RB0 = 0;
  1645  01A6  1006               	bcf	6,0	;volatile
  1646                           
  1647                           ;lcd.h: 29: Lcd_Port(a);
  1648  01A7  080F               	movf	Lcd_Cmd@a,w
  1649  01A8  21CB               	fcall	_Lcd_Port
  1650                           
  1651                           ;lcd.h: 30: RB1 = 1;
  1652  01A9  1486               	bsf	6,1	;volatile
  1653                           
  1654                           ;lcd.h: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  1655  01AA  3006               	movlw	6
  1656  01AB  008E               	movwf	??_Lcd_Cmd+1
  1657  01AC  3030               	movlw	48
  1658  01AD  008D               	movwf	??_Lcd_Cmd
  1659  01AE                     u607:	
  1660  01AE  0B8D               	decfsz	??_Lcd_Cmd,f
  1661  01AF  29AE               	goto	u607
  1662  01B0  0B8E               	decfsz	??_Lcd_Cmd+1,f
  1663  01B1  29AE               	goto	u607
  1664  01B2  0000               	nop
  1665                           
  1666                           ;lcd.h: 32: RB1 = 0;
  1667  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1668  01B4  1086               	bcf	6,1	;volatile
  1669  01B5  0008               	return
  1670  01B6                     __end_of_Lcd_Cmd:	
  1671                           
  1672                           	psect	text11
  1673  01CB                     __ptext11:	
  1674 ;; *************** function _Lcd_Port *****************
  1675 ;; Defined at:
  1676 ;;		line 2 in file "lcd.h"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  a               1    wreg     unsigned char 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  a               1    0[BANK0 ] unsigned char 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 100/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0
  1690 ;;      Params:         0       0
  1691 ;;      Locals:         0       1
  1692 ;;      Temps:          0       0
  1693 ;;      Totals:         0       1
  1694 ;;Total ram usage:        1 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_Lcd_Cmd
  1700 ;;		_Lcd_Init
  1701 ;;		_Lcd_Write_Char
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _Lcd_Port
  1707  01CB                     _Lcd_Port:	
  1708                           
  1709                           ;incstack = 0
  1710                           ; Regs used in _Lcd_Port: [wreg]
  1711                           ;Lcd_Port@a stored from wreg
  1712  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1713  01CC  008C               	movwf	Lcd_Port@a
  1714                           
  1715                           ;lcd.h: 4: if(a & 1)
  1716  01CD  1C0C               	btfss	Lcd_Port@a,0
  1717  01CE  29D1               	goto	l29
  1718                           
  1719                           ;lcd.h: 5: RB4 = 1;
  1720  01CF  1606               	bsf	6,4	;volatile
  1721  01D0  29D2               	goto	l30
  1722  01D1                     l29:	
  1723                           
  1724                           ;lcd.h: 6: else
  1725                           ;lcd.h: 7: RB4 = 0;
  1726  01D1  1206               	bcf	6,4	;volatile
  1727  01D2                     l30:	
  1728                           
  1729                           ;lcd.h: 9: if(a & 2)
  1730  01D2  1C8C               	btfss	Lcd_Port@a,1
  1731  01D3  29D6               	goto	l31
  1732                           
  1733                           ;lcd.h: 10: RB5 = 1;
  1734  01D4  1686               	bsf	6,5	;volatile
  1735  01D5  29D7               	goto	l32
  1736  01D6                     l31:	
  1737                           
  1738                           ;lcd.h: 11: else
  1739                           ;lcd.h: 12: RB5 = 0;
  1740  01D6  1286               	bcf	6,5	;volatile
  1741  01D7                     l32:	
  1742                           
  1743                           ;lcd.h: 14: if(a & 4)
  1744  01D7  1D0C               	btfss	Lcd_Port@a,2
  1745  01D8  29DB               	goto	l33
  1746                           
  1747                           ;lcd.h: 15: RB6 = 1;
  1748  01D9  1706               	bsf	6,6	;volatile
  1749  01DA  29DC               	goto	l34
  1750  01DB                     l33:	
  1751                           
  1752                           ;lcd.h: 16: else
  1753                           ;lcd.h: 17: RB6 = 0;
  1754  01DB  1306               	bcf	6,6	;volatile
  1755  01DC                     l34:	
  1756                           
  1757                           ;lcd.h: 19: if(a & 8)
  1758  01DC  1D8C               	btfss	Lcd_Port@a,3
  1759  01DD  29E0               	goto	l35
  1760                           
  1761                           ;lcd.h: 20: RB7 = 1;
  1762  01DE  1786               	bsf	6,7	;volatile
  1763  01DF  0008               	return
  1764  01E0                     l35:	
  1765                           
  1766                           ;lcd.h: 21: else
  1767                           ;lcd.h: 22: RB7 = 0;
  1768  01E0  1386               	bcf	6,7	;volatile
  1769  01E1  0008               	return
  1770  01E2                     __end_of_Lcd_Port:	
  1771  004E                     btemp	set	78	;btemp
  1772  004E                     wtemp0	set	78


Data Sizes:
    Strings     22
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     58      58

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[3]), STR_2(CODE[8]), 
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@str(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> main@str(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0    3270
                                             24 BANK0     34    34      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    17      3    1410
                                             12 BANK0     12     9      3
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     405
                                              5 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     180
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     541
                                              4 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___wmul
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     3A      3A       3       87.9%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 26 01:17:12 2018

                        pc 0002                __CFG_CP$OFF 0000                         PL2 03B0  
                       PL4 020E                         PL6 032C                         l30 01D2  
                       l31 01D6                         l32 01D7                         l33 01DB  
                       l34 01DC                         l35 01E0                         l29 01D1  
                       l68 035B                         fsr 0004        ___wmul@multiplicand 000E  
                      l905 0254                        l923 0204                        l951 01B9  
                      l873 0267                        l961 02C4                        l885 027E  
                      l991 02FD                        l983 02E9                        l967 02D4  
                      l897 0241                        l977 02E7                        l997 0307  
                      l999 030A                        _RB0 0030                        _RB1 0031  
                      _RB4 0034                        _RB5 0035                        _RB6 0036  
                      _RB7 0037                        u335 0270                        u445 02F6  
                      u607 01AE                        u375 0247                        u537 0354  
                      u547 03A9                        u557 0227                        u567 0230  
                      u577 0289                        u587 0294                        u597 029E  
                      fsr0 0004                        indf 0000               __CFG_FOSC$XT 0000  
                     l1005 0323                       l1015 01E4                       l1007 02B6  
                     l1009 0327                       l1019 01EC                       l1037 0339  
                     l1039 033A                       STR_1 0011                       STR_2 0019  
                     STR_3 0024                       STR_4 0021                       STR_5 0021  
        ?_Lcd_Write_String 000C                       _main 0333                       btemp 004E  
                     start 0000         ??_Lcd_Write_String 0011            __end_of_Lcd_Cmd 01B6  
                    ?_main 000C              __CFG_WDTE$OFF 0000            __end_of___lwdiv 0283  
          __end_of___lwmod 0259    __size_of_Lcd_Set_Cursor 0013                      _TRISA 0085  
                    _TRISB 0086            __end_of_dpowers 0011                      pclath 000A  
                    status 0003                      wtemp0 004E            __end_of_sprintf 032C  
         __end_of_Lcd_Init 02B3           __end_of_Lcd_Port 01E2            __initialization 03FE  
             __end_of_main 03B0                     ??_main 0024         __size_of_Lcd_Clear 0004  
                ??_Lcd_Cmd 000D    __size_of_Lcd_Write_Char 001D                     _TRISB2 0432  
           __CFG_PWRTE$OFF 0000                     ___wmul 01E2                  ??___lwdiv 0000  
                ??___lwmod 0000                     main@x1 0042                     main@x2 0044  
                ??_sprintf 001B            Lcd_Set_Cursor@a 0011            Lcd_Set_Cursor@b 0010  
          Lcd_Set_Cursor@y 0013            Lcd_Set_Cursor@z 0012    __end_of__initialization 03FE  
        __end_of_Lcd_Clear 01A4             __pcstackCOMMON 0000                 __end_ofPL2 03FE  
               __end_ofPL4 0218                 __end_ofPL6 0333             _Lcd_Set_Cursor 01FB  
                ?_Lcd_Init 000C                  ?_Lcd_Port 000C                 __pmaintext 0333  
                  ?___wmul 000C  __size_of_Lcd_Write_String 0015     __end_of_Lcd_Set_Cursor 020E  
               ??_Lcd_Init 0010                 ??_Lcd_Port 0000                 __stringtab 0001  
           _Lcd_Write_Char 0218                    _Lcd_Cmd 01A4            __size_of___wmul 0019  
                  ___lwdiv 0259                    ___lwmod 0235            ?_Lcd_Set_Cursor 0010  
                  __ptext1 02B3                    __ptext2 0235                    __ptext3 0259  
                  __ptext4 01E2                    __ptext5 01B6                    __ptext6 0218  
                  __ptext7 01FB                    __ptext8 0283                    __ptext9 01A0  
                  _dpowers 0007                    _sprintf 02B3                    main@str 0038  
   __end_of_Lcd_Write_Char 0235       end_of_initialization 03FE                  Lcd_Port@a 000C  
                _PORTAbits 0005                  _PORTBbits 0006            ?_Lcd_Write_Char 000C  
        Lcd_Write_String@a 0014          Lcd_Write_String@i 0012                  _Lcd_Clear 01A0  
           __end_of___wmul 01FB           _Lcd_Write_String 01B6        start_initialization 03FE  
        __size_of_Lcd_Init 0030          __size_of_Lcd_Port 0017                 ?_Lcd_Clear 000C  
                 ??___wmul 0000            Lcd_Write_Char@a 0010            Lcd_Write_Char@y 000F  
                ___latbits 0000              __pcstackBANK0 000C                   ?_Lcd_Cmd 000C  
              sprintf@flag 001E                sprintf@prec 001F           ___lwdiv@dividend 000E  
         ??_Lcd_Set_Cursor 0000                   ?___lwdiv 000C                   ?___lwmod 0013  
                __pstrings 0001           ___lwdiv@quotient 0010                   ?_sprintf 0018  
           ___wmul@product 0010                   Lcd_Cmd@a 000F                ??_Lcd_Clear 0000  
              __stringbase 0006          ___wmul@multiplier 000C           ??_Lcd_Write_Char 000D  
                 _Lcd_Init 0283                   _Lcd_Port 01CB   __end_of_Lcd_Write_String 01CB  
         __size_of_Lcd_Cmd 0012           __size_of___lwdiv 002A           __size_of___lwmod 0024  
       __end_of__stringtab 0007                 sprintf@val 0020            ___lwdiv@divisor 000C  
          ___lwdiv@counter 0012                   __ptext10 01A4                   __ptext11 01CB  
         __size_of_sprintf 0079              __size_of_main 007D         Lcd_Write_Char@temp 000E  
                sprintf@ap 001D                  sprintf@sp 0022           ___lwmod@dividend 0015  
                stringcode 0001         Lcd_Set_Cursor@temp 0014                   sprintf@c 0023  
                 sprintf@f 0018            ___lwmod@divisor 0013            ___lwmod@counter 0017  
                 stringdir 0001                   stringtab 0001  
